replicaCount: 1

image:
  # -- The repository for the image. By default, 
  # this points to the Software AG container repository. 
  # Change this for air-gapped installations or custom images.
  # For the Software AG container repository you need to have a 
  # valid access token stored as registry credentials
  repository: sagcr.azurecr.io/apigateway-minimal
  pullPolicy: IfNotPresent
  # -- The image tag of the apigateway image default this will be the latest version. 
  # For realworld scenarios SAG recommends to use a 
  # specific version to not accidently change production versions with newer images.
  tag: "10.15"

# -- Image pull secret reference. By default looks for `regcred`.
imagePullSecrets: 
  - name: regcred

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # If not set and create is true, a name is generated using the fullname template
  roleName: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

# multiple ingresses for ui, admin, ext and rt 
ingresses: 
  ui:
    defaultHost: ""
    enabled: true
    svcName: ""
    svcPort: ""
    className: ""
    annotations: 
      nginx.ingress.kubernetes.io/affinity: "cookie"
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host: 
        paths:
          - path: /
            pathType: Prefix
    tls: 
      - secretName: 
        hosts: 
  rt:
    defaultHost: 
    enabled: true
    svcName: ""
    svcPort: ""
    className: ""
    annotations: {}
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host:
        paths:
          - path: /gateway
            pathType: Prefix
    tls: 
      - secretName: 
        hosts:
  admin:
    defaultHost: ""
    enabled: true
    svcName: ""
    svcPort: ""
    className: ""
    annotations: 
      nginx.ingress.kubernetes.io/affinity: "cookie"
    hosts:
      - host: default
        paths:
          - path: /
            pathType: Prefix
    tls: 
      - secretName:
        hosts:
          - default

# global ingress settings for tls secret name, cert and key
ingress:
  defaultDomain: my-domain.com 
  tls:
    # -- default secret name for TLS. By default empty,
    # will look for <release-name-apigateway->tls".
    secretName: ""
    cert: "" 
    key: ""

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  apigwInitContainer:  
    requests:
      cpu: 100m
      memory: 50Mi
    limits:
      cpu: 200m
      memory: 100Mi
  
  apigwContainer:
    requests:
      cpu: 500m
      memory: 4Gi
    limits:
      # use a high cpu limit to avaoid the container being throttled
      cpu: 8
      memory: 8Gi
  

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

global: 
  curlImage: "curlimages/curl"
  # -- Protocol for health check for kibana startup, must be http / https
  apigwHealthProtocol:             "http"             
  # -- Service name for health check for kibana startup, must same value as apigwAdminService
  apigwHealthService:              "apigw-admin-svc"  
  # -- Port for health check for kibana startup, must same value as apigwAdminPort  
  apigwHealthPort:                 5555               

# -- Exta environment properties to be passed on to the container
extraEnvs: {}

# -- Exta volumes that should be mounted.
# - name: extras
#   emptyDir: {}
extraVolumes: []

# -- Extra volume mounts
# - name: extras
#   mountPath: /usr/share/extras
#   readOnly: true
extraVolumeMounts: []

# -- Extra containers which should run in addition to the main container as a sidecar
# - name: do-something
#   image: busybox
#   command: ['do', 'something']
extraContainers: []

# -- Extra init containers that are executed before starting the main container
# - name: do-something
#   image: busybox
#   command: ['do', 'something']
extraInitContainers: []

# -- Extra config maps for additional configurations such as extra ports, etc.
extraConfigMaps: []

# -- lifecycle hooks to execute on preStop / postStart,...
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
# postStart:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
lifecycle: {}

apigw:
  # -- Deploy Elasticsearch. Depends on Elasic Search Helm Charts. See https://github.com/elastic/helm-charts/blob/main/elasticsearch  
  elasticSearchDeployment: true

  initMemory: 1024Mi
  maxMemory: 1024Mi

  # -- The API Gateway runtime port for API invocations. By default API Gateway images do not have this port setup. 
  # You must manually set up this port or create post init job that creates this port after API Gateway was initialized.
  runtimePort:             5556
  # -- The API Diagnostics port. 
  diagPort:                9999 
  # -- The default API Administration UI port
  uiPort:                  9072
  # -- The default administration port. Note in a default installation this port will also be used for runtime traffic.
  adminPort:               5555
  # -- External Runtime Port for Reverse Invoke Setups. This port must be manually setup after API Gateway was initizalized.
  runtimeExternalPort:     6555
  readinessProbe:
    # -- The readinessprobe scheme (https or http).
    scheme:                "HTTP"
  serviceName:             "apigw"

  # -- Specifies the location and name of the configuration variables template
  # or the directory containing templates for use with Microservices Runtime or
  # an Integration Server with licensed Microservices functionality. Use a
  # comma-separated list to specify multiple templates and/or directories.
  # See: https://documentation.softwareag.com/webmethods/integration_server/pie10-15/webhelp/pie-webhelp/index.html#page/pie-webhelp%2Fto-sag_environment_variables_2.html
  # Note: should only be used for passing simple configurations such as extended 
  # settings. For all other configurations of API Gateway, use the official 
  # Admin REST API.
  sagIsConfigProperties:   "/config/application.properties"

  uiService:              "apigw-ui-svc"
  rtService:              "apigw-rt-svc"
  rtExternalService:      "apigw-rt-ext-svc"
  apigwAdminService:      "apigw-admin-svc"

  # -- configuration source files for API Gateway
  configSources:

    elasticsearch:      
      tenantId: default
      hosts: "{{ .Release.Name }}-{{ .Chart.Name }}-es-http:{{ .Values.elasticsearch.port }}"
      


prometheus:
  path: "/metrics"
  port: "5555"
  scheme: "http"
  scrape: "true"

metering:

  # -- enable metering 
  enabled: true
  # -- The URL of the metering aggregator server REST API.
  serverUrl: "https://metering.softwareag.cloud/api/measurements"
  # -- Тhe type of the proxy that the metering client uses. 
  # Valid values are: 
  # *DIRECT (default). 
  # *HTTP 
  # *SOCKS
  # Indicates that the metering client does not use a proxy. 
  proxyType: "DIRECT"
  # -- The proxy address in a <host>:<port> format that the metering client uses. 
  # Configure this property only if you use a metering proxy.
  proxyAddress:
  # -- The proxy password that the metering client uses.
  # Configure this property only if you use a metering proxy with authentication.
  # Depending on the method that you use to provide a password, ensure that you escape password characters that are specific for the selected method.
  # Valid characters:
  # *Letters: A-Z, a-z
  # *Numbers: 0-9
  # *Special characters: !@#$%^&*()_+-=[]{}\/?,.<>;
  proxyPass: 
  # -- Тhe time in milliseconds to establish the initial TCP connection when the metering client calls the server REST endpoint. This is also the time to start the request.
  serverConnectTimeout: "60000"
  # -- The maximum time in milliseconds without data transfer over the TCP connection to the server. This is also the time that it takes for the server to respond. When this time passes, the request fails.
  serverReadTimeout: "300000"
  # -- The period in seconds for which data is accumulated before a log record is produced.
  accumulationPeriod: "1800"
  reportPeriod: "3600"
  # -- An alias of the webMethods product instance or a group of instances, for which usage data is measured.
  runtimeAlias:
  # -- The level of log messages that are logged on the console.
  # Valid values are:
  # *error - logs only ERROR messages.
  # *warn (default) - logs ERROR and WARN messages.
  # *info - logs ERROR, WARN, and INFO messages.
  # *debug - logs ERROR, WARN, INFO, and DEBUG messages. Use as a Java system property or an environment variable to see the debug messages of the configuration initialization.
  logLevel:
  # -- The absolute path to the metering client truststore that is used for HTTPS connections. Add this value in any of the following cases:
  # *If you use the Software AG Metering Server on premises (via HTTPS) and the certificates in the truststore do not match the certificates configured in Software AG Runtime (CTP).
  # *If you use a metering proxy that terminates the SSL connection to the Metering Server in Software AG Cloud. 
  trustStoreFile:
  # -- The password for the metering client truststore.
  # Configure this property only if you use a truststore.
  trustStorePassword:

elasticsearch:

  # -- Deploy elastic search instance 
  deploy: true

  # -- The ECK version to be used
  version: 8.2.3

  # -- The image that should be used.
  # By default ECK will use the official Elasticsearch images. 
  # Overwrite this to use an image from an internal registry or any custom images.
  # Make sure that the image corresponds to the version field.
  image: 

  # -- The elasticsearch http service name that API Gateway uses.
  # The default is compiled of the fullname (releasename + chart name) + "-http" 
  # You MUST override this if you use an external elastic search service and do not deploy the embedded elastic CRD from this chart.
  serviceName: ""
  # -- The default elasticsearch instance http communication port
  port: 9200
  # -- The secret name that holds the sag es user for API Gateway.
  secretName: ""

  # -- Whether the communication from APIGW and Kibana should be HTTPS
  # Note: you will need to create certificate and a separate truststore for the communication.
  tlsEnabled: false

  # -- The secret name that holds the keystore password  
  keystoreSecretName: ""

  # -- The name of the secret holding the tls secret
  # By default the name will be fullname of release + "es-tls-secret"
  certificateSecretName: "{{ include \"common.names.fullname\" .}}-es-tls-secret"
  
  # -- Node sets. See official ElasticSearch documentation at:
  # https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-orchestration.html
  # if you specify node sets here the defaultNodeSet will not be used.
  nodeSets: {}
  
  # -- Default Node Set
  defaultNodeSet:

    # -- the number of replicas for Elastic Search
    count: 1
    # -- Set this to true for production workloads, this will also 
    # use an init container to increase the vm.max_map_count to 262144 on the nodes.
    memoryMapping: false    

    # -- Controls whether to start an init container that increases the vm.max_map_count to 262144 on the node.
    # Set memoryMapping to true and this setting also to true to run the init container.
    # Note that this requires the ability to run privileged containers, which is likely not the case on many secure clusters.
    setMaxMapCount: true     
    installMapperSizePlugin: true

    # -- Extra configuration parameters for Elasticsearch nodes to be appended to the default (none).
    # See https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-node-configuration.html
    extraConfig: {}

    # -- Extra init containers to be started before Elasticsearch nodes are started.
    # See https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-init-containers-plugin-downloads.html
    extraInitContainers: {}  
  


kibana:
  port: 5601

prometheus-elasticsearch-exporter:
  es:
    uri: "{{ .Release.Name }}-apigateway-es-http:9200"
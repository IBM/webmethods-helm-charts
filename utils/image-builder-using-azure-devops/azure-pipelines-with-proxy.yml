# Starter pipeline
# https://aka.ms/yaml

parameters:
- name: JOB_NAME
  displayName: 'Job name'
  default: 'wm-msr#10.15'
- name: TAG
  displayName: Tag the created image with this name, e.g. wm-msr:10.15
  default: 'wm-msr:10.15'
- name: PRODUCTS
  displayName: List of product components inside image (separated by comma)
  default: 'MSC,Monitor,PIEContainerExternalRDBMS'
- name: RELEASE
  displayName: Dowmload product components from release version
  default: '10.15'
- name: ADMIN_PASSWORD
  default: 'manage'
  displayName: Define Administrator password for installed product components
- name: BASE_IMAGE
  default: 'registry.access.redhat.com/ubi8/ubi:latest'
  displayName: 'Create new image based on this'
- name: VARIABLE_GROUP
  default: 'webmethods-image-creator-vars'
  displayName: 'Use parameters from Variable Group'

variables:
- group: ${{parameters.VARIABLE_GROUP}}

trigger:
- none

pr: none # will disable PR builds

name: '${{parameters.JOB_NAME}}'     # Pipeline run number.
appendCommitMessageToRunName: false  # Append the commit message to the build number. The default is true.

pool:
  name: $(AGENT_POOL)
  vmImage: ubuntu-latest

steps:
- script: |
    apt-get update
    apt-get install docker.io
  displayName: 'Install Docker CLI'

- script: |
    echo 'Login to: $(REGISTRY_HOST)'
    docker login -u '$(REGISTRY_USERNAME)' -p '$(REGISTRY_PASSWORD)' $(REGISTRY_HOST)
  displayName: 'Login Docker registry'

- script: |
    echo 'Download Installer from Empower by release date: $(INSTALLER_VERSION)'
    curl https://empowersdc.softwareag.com/ccinstallers/SoftwareAGInstaller$(INSTALLER_VERSION)-Linux_x86_64.bin -o installer.bin
  displayName: 'Download Installer from Empower'

- script: |
    echo '$(EMPOWER_PASSWORD)' > pass.txt
    sh installer.bin create container-image --name '${{parameters.TAG}}' --release '${{parameters.RELEASE}}' --accept-license --products '${{parameters.PRODUCTS}}' --username '$(EMPOWER_USERNAME)' --password:file=pass.txt --admin-password '${{parameters.ADMIN_PASSWORD}}' --base-image '${{parameters.BASE_IMAGE}}' --proxy '$(PROXY)'
    rm pass.txt
  displayName: 'Start Installer to create image'

- script:
    find . -name "installLog.txt" | xargs cat
  displayName: 'Print out Installer log'

- script: |
    echo 'Push image $(REGISTRY_HOST)/$(REGISTRY_PROJECT)/${{parameters.TAG}} ...'
    docker tag '${{parameters.TAG}}' '$(REGISTRY_HOST)/$(REGISTRY_PROJECT)/${{parameters.TAG}}'
    docker push '$(REGISTRY_HOST)/$(REGISTRY_PROJECT)/${{parameters.TAG}}'
  displayName: 'Push image to Docker registry'

- script:
    docker rmi '${{parameters.TAG}}' '$(REGISTRY_HOST)/$(REGISTRY_PROJECT)/${{parameters.TAG}}'
  displayName: 'Remove local Docker images'
